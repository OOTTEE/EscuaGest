openapi: 3.0.2
info:
  title: Escuagest API
  description: "Escuagest API"
  contact:
    email: javier.ote.ote@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8080
tags:
  - name: user
    description: Operations about user
  - name: competition
  - name: sessions
  - name: races
paths:
  /api/v2/users:
    get:
      tags:
        - user
      summary: Get logged user info
      operationId: GetLoggedUserInfo
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/v2/competitions:
    get:
      tags:
        - competition
        - sessions
        - races
      summary: return all competitions
      operationId: GetAllCompetitions
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: direction
          schema:
            $ref: '#/components/schemas/SortDirectionEnum'
      responses:
        200:
          description: return a list of competitions
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompetitionDTO'
                  paged:
                    $ref: '#/components/schemas/PagedDTO'
                  _links:
                    type: array
                    items:
                      $ref: '#/components/schemas/LinkDTO'
        400:
          $ref: '#/components/schemas/BadRequestError'
        401:
          $ref: '#/components/schemas/UnauthorizedError'
        403:
          $ref: '#/components/schemas/ForbiddenError'
        404:
          $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/schemas/InternalServerError'

  /swimmers/{username}:
    get:
      tags:
        - swimmer
      summary: Get swimmer by id
      operationId: getSwimmerByUsername
      parameters:
        - name: username
          in: path
          description: 'The username that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwimmerDTO'
        404:
          description: User not found
          content: { }
  /swimmers:
    get:
      tags:
        - swimmer
      summary: Get all swimmers
      operationId: getAllSwimmers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SwimmerDTO'
        404:
          description: User not found
          content: { }
    post:
      tags:
        - swimmer
      summary: Create a new swimmer for a user.
      operationId: postNewUser
      requestBody:
        description: Swimmer object thats needs to be added on the system.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSwimmerDTO'
      responses:
        201:
          description: Swimmer created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwimmerDTO'


components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    InternalServerError:
      description: "Generic Internal Error"
      content:
        application/json:
          schema:
            $ref: '#components/schemas/InternalServerError'
  schemas:
    CompetitionDTO:
      type: object
      required:
        - title
        - reference
        - inscriptionLimitDate
        - maxInscriptionsPerSwimmer
      properties:
        title:
          type: string
          maximum: 80
        reference:
          type: string
          pattern: ^[a-zA-Z0-9-_]{7,80}$
        description:
          type: string
        competitionDay:
          type: string
        inscriptionLimitDate:
          type: string
        maxInscriptionsPerSwimmer:
          type: integer
        location:
          type: string
        sessions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/sessionDTO'
    SessionDTO:
      type: object
      required:
        - date
        - name
      properties:
        date:
          type: string
        name:
          type: string
        races:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/racesDTO'
    RacesDTO:
      required:
        - name
        - style
      properties:
        name:
          type: string
        style:
          type: string
          enum:
            - backstroke
            - freestyle
            - four_styles
            - breaststroke
    LinkDTO:
      properties:
        href:
          type: string
        name:
          type: string
    PagedDTO:
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalPage:
          type: integer
    SortDirectionEnum:
      type: string
      enum:
        - DESC
        - ASC
    ErrorFields:
      properties:
        status:
          type: string
        title:
          type: string
        detail:
          type: string
        type:
          type: string
        traceId:
          type: string
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorFieldsDTO'
      properties:
        status:
          example: 404
        type:
          example: NotFoundError
    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/ErrorFieldsDTO'
      properties:
        status:
          example: 404
        type:
          example: ForbiddenError
    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/ErrorFieldsDTO'
      properties:
        status:
          example: 404
        type:
          example: InternalServerError
    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/ErrorFieldsDTO'
      properties:
        status:
          example: 404
        type:
          example: UnauthorizedError
    BadRequestError:
      allOf:
        - $ref: '#/components/schemas/ErrorFieldsDTO'
      properties:
        status:
          example: 404
        type:
          example: BadRequestError

security:
  - bearerAuth: []